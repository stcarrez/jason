-----------------------------------------------------------------------
--  Jason.Projects.Models -- Jason.Projects.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2016 Stephane.Carrez
--  Written by Stephane.Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with Ada.Unchecked_Deallocation;
with Util.Beans.Objects.Time;
with ASF.Events.Faces.Actions;
package body Jason.Projects.Models is

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;
   use type ADO.Objects.Object_Record;

   pragma Warnings (Off, "formal parameter * is not referenced");

   function Project_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => PROJECT_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Project_Key;

   function Project_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => PROJECT_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Project_Key;

   function "=" (Left, Right : Project_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Project_Ref'Class;
                        Impl   : out Project_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Project_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Project_Ref) is
      Impl : Project_Access;
   begin
      Impl := new Project_Impl;
      Impl.Version := 0;
      Impl.Create_Date := ADO.DEFAULT_TIME;
      Impl.Status := Jason.Projects.Models.Status_Type'First;
      Impl.Last_Ticket := 0;
      Impl.Update_Date := ADO.DEFAULT_TIME;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Project
   -- ----------------------------------------

   procedure Set_Id (Object : in out Project_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Project_Ref)
                  return ADO.Identifier is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Project_Ref)
                  return Integer is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Name (Object : in out Project_Ref;
                        Value : in String) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Project_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Project_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Project_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Create_Date (Object : in out Project_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 4, Impl.Create_Date, Value);
   end Set_Create_Date;

   function Get_Create_Date (Object : in Project_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Create_Date;
   end Get_Create_Date;


   procedure Set_Status (Object : in out Project_Ref;
                         Value  : in Jason.Projects.Models.Status_Type) is
      procedure Set_Field_Enum is
         new ADO.Objects.Set_Field_Operation (Status_Type);
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      Set_Field_Enum (Impl.all, 5, Impl.Status, Value);
   end Set_Status;

   function Get_Status (Object : in Project_Ref)
                  return Jason.Projects.Models.Status_Type is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Status;
   end Get_Status;


   procedure Set_Last_Ticket (Object : in out Project_Ref;
                              Value  : in Integer) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Integer (Impl.all, 6, Impl.Last_Ticket, Value);
   end Set_Last_Ticket;

   function Get_Last_Ticket (Object : in Project_Ref)
                  return Integer is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Last_Ticket;
   end Get_Last_Ticket;


   procedure Set_Update_Date (Object : in out Project_Ref;
                              Value  : in Ada.Calendar.Time) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Time (Impl.all, 7, Impl.Update_Date, Value);
   end Set_Update_Date;

   function Get_Update_Date (Object : in Project_Ref)
                  return Ada.Calendar.Time is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Update_Date;
   end Get_Update_Date;


   procedure Set_Description (Object : in out Project_Ref;
                               Value : in String) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 8, Impl.Description, Value);
   end Set_Description;

   procedure Set_Description (Object : in out Project_Ref;
                              Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 8, Impl.Description, Value);
   end Set_Description;

   function Get_Description (Object : in Project_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Description);
   end Get_Description;
   function Get_Description (Object : in Project_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Description;
   end Get_Description;


   procedure Set_Wiki (Object : in out Project_Ref;
                       Value  : in AWA.Wikis.Models.Wiki_Space_Ref'Class) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 9, Impl.Wiki, Value);
   end Set_Wiki;

   function Get_Wiki (Object : in Project_Ref)
                  return AWA.Wikis.Models.Wiki_Space_Ref'Class is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Wiki;
   end Get_Wiki;


   procedure Set_Owner (Object : in out Project_Ref;
                        Value  : in AWA.Users.Models.User_Ref'Class) is
      Impl : Project_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 10, Impl.Owner, Value);
   end Set_Owner;

   function Get_Owner (Object : in Project_Ref)
                  return AWA.Users.Models.User_Ref'Class is
      Impl : constant Project_Access
         := Project_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Owner;
   end Get_Owner;

   --  Copy of the object.
   procedure Copy (Object : in Project_Ref;
                   Into   : in out Project_Ref) is
      Result : Project_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Project_Access
              := Project_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Project_Access
              := new Project_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Name := Impl.Name;
            Copy.Create_Date := Impl.Create_Date;
            Copy.Status := Impl.Status;
            Copy.Last_Ticket := Impl.Last_Ticket;
            Copy.Update_Date := Impl.Update_Date;
            Copy.Description := Impl.Description;
            Copy.Wiki := Impl.Wiki;
            Copy.Owner := Impl.Owner;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Project_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Project_Access := new Project_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Project_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Project_Access := new Project_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Project_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Project_Access := new Project_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Project_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Project_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Project_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Project_Impl) is
      type Project_Impl_Ptr is access all Project_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Project_Impl, Project_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Project_Impl_Ptr := Project_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Project_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, PROJECT_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Project_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Project_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (PROJECT_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_1_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_1_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_1_NAME, --  create_date
                          Value => Object.Create_Date);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_1_NAME, --  status
                          Value => Integer (Status_Type'Pos (Object.Status)));
         Object.Clear_Modified (5);
      end if;
      if Object.Is_Modified (6) then
         Stmt.Save_Field (Name  => COL_5_1_NAME, --  last_ticket
                          Value => Object.Last_Ticket);
         Object.Clear_Modified (6);
      end if;
      if Object.Is_Modified (7) then
         Stmt.Save_Field (Name  => COL_6_1_NAME, --  update_date
                          Value => Object.Update_Date);
         Object.Clear_Modified (7);
      end if;
      if Object.Is_Modified (8) then
         Stmt.Save_Field (Name  => COL_7_1_NAME, --  description
                          Value => Object.Description);
         Object.Clear_Modified (8);
      end if;
      if Object.Is_Modified (9) then
         Stmt.Save_Field (Name  => COL_8_1_NAME, --  wiki_id
                          Value => Object.Wiki);
         Object.Clear_Modified (9);
      end if;
      if Object.Is_Modified (10) then
         Stmt.Save_Field (Name  => COL_9_1_NAME, --  owner_id
                          Value => Object.Owner);
         Object.Clear_Modified (10);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Project_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (PROJECT_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_1_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_1_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_1_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_3_1_NAME, --  create_date
                        Value => Object.Create_Date);
      Query.Save_Field (Name  => COL_4_1_NAME, --  status
                        Value => Integer (Status_Type'Pos (Object.Status)));
      Query.Save_Field (Name  => COL_5_1_NAME, --  last_ticket
                        Value => Object.Last_Ticket);
      Query.Save_Field (Name  => COL_6_1_NAME, --  update_date
                        Value => Object.Update_Date);
      Query.Save_Field (Name  => COL_7_1_NAME, --  description
                        Value => Object.Description);
      Query.Save_Field (Name  => COL_8_1_NAME, --  wiki_id
                        Value => Object.Wiki);
      Query.Save_Field (Name  => COL_9_1_NAME, --  owner_id
                        Value => Object.Owner);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Project_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (PROJECT_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Project_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Project_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Project_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Create_Date);
      elsif Name = "status" then
         return Jason.Projects.Models.Status_Type_Objects.To_Object (Impl.Status);
      elsif Name = "last_ticket" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (Impl.Last_Ticket));
      elsif Name = "update_date" then
         return Util.Beans.Objects.Time.To_Object (Impl.Update_Date);
      elsif Name = "description" then
         return Util.Beans.Objects.To_Object (Impl.Description);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Project_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, PROJECT_DEF'Access);
   begin
      Stmt.Execute;
      Project_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Project_Ref;
            Impl : constant Project_Access := new Project_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Project_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (2);
      Object.Create_Date := Stmt.Get_Time (3);
      Object.Status := Status_Type'Val (Stmt.Get_Integer (4));
      Object.Last_Ticket := Stmt.Get_Integer (5);
      Object.Update_Date := Stmt.Get_Time (6);
      Object.Description := Stmt.Get_Unbounded_String (7);
      if not Stmt.Is_Null (8) then
         Object.Wiki.Set_Key_Value (Stmt.Get_Identifier (8), Session);
      end if;
      if not Stmt.Is_Null (9) then
         Object.Owner.Set_Key_Value (Stmt.Get_Identifier (9), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;
   function Attribute_Definition_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => ATTRIBUTE_DEFINITION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Attribute_Definition_Key;

   function Attribute_Definition_Key (Id : in String) return ADO.Objects.Object_Key is
      Result : ADO.Objects.Object_Key (Of_Type  => ADO.Objects.KEY_INTEGER,
                                       Of_Class => ATTRIBUTE_DEFINITION_DEF'Access);
   begin
      ADO.Objects.Set_Value (Result, Id);
      return Result;
   end Attribute_Definition_Key;

   function "=" (Left, Right : Attribute_Definition_Ref'Class) return Boolean is
   begin
      return ADO.Objects.Object_Ref'Class (Left) = ADO.Objects.Object_Ref'Class (Right);
   end "=";

   procedure Set_Field (Object : in out Attribute_Definition_Ref'Class;
                        Impl   : out Attribute_Definition_Access) is
      Result : ADO.Objects.Object_Record_Access;
   begin
      Object.Prepare_Modify (Result);
      Impl := Attribute_Definition_Impl (Result.all)'Access;
   end Set_Field;

   --  Internal method to allocate the Object_Record instance
   procedure Allocate (Object : in out Attribute_Definition_Ref) is
      Impl : Attribute_Definition_Access;
   begin
      Impl := new Attribute_Definition_Impl;
      Impl.Version := 0;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Allocate;

   -- ----------------------------------------
   --  Data object: Attribute_Definition
   -- ----------------------------------------

   procedure Set_Id (Object : in out Attribute_Definition_Ref;
                     Value  : in ADO.Identifier) is
      Impl : Attribute_Definition_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Key_Value (Impl.all, 1, Value);
   end Set_Id;

   function Get_Id (Object : in Attribute_Definition_Ref)
                  return ADO.Identifier is
      Impl : constant Attribute_Definition_Access
         := Attribute_Definition_Impl (Object.Get_Object.all)'Access;
   begin
      return Impl.Get_Key_Value;
   end Get_Id;


   function Get_Version (Object : in Attribute_Definition_Ref)
                  return Integer is
      Impl : constant Attribute_Definition_Access
         := Attribute_Definition_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Version;
   end Get_Version;


   procedure Set_Name (Object : in out Attribute_Definition_Ref;
                        Value : in String) is
      Impl : Attribute_Definition_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 3, Impl.Name, Value);
   end Set_Name;

   procedure Set_Name (Object : in out Attribute_Definition_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Attribute_Definition_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 3, Impl.Name, Value);
   end Set_Name;

   function Get_Name (Object : in Attribute_Definition_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Name);
   end Get_Name;
   function Get_Name (Object : in Attribute_Definition_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Attribute_Definition_Access
         := Attribute_Definition_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Name;
   end Get_Name;


   procedure Set_Default_Value (Object : in out Attribute_Definition_Ref;
                                 Value : in String) is
      Impl : Attribute_Definition_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_String (Impl.all, 4, Impl.Default_Value, Value);
   end Set_Default_Value;

   procedure Set_Default_Value (Object : in out Attribute_Definition_Ref;
                                Value  : in Ada.Strings.Unbounded.Unbounded_String) is
      Impl : Attribute_Definition_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Unbounded_String (Impl.all, 4, Impl.Default_Value, Value);
   end Set_Default_Value;

   function Get_Default_Value (Object : in Attribute_Definition_Ref)
                 return String is
   begin
      return Ada.Strings.Unbounded.To_String (Object.Get_Default_Value);
   end Get_Default_Value;
   function Get_Default_Value (Object : in Attribute_Definition_Ref)
                  return Ada.Strings.Unbounded.Unbounded_String is
      Impl : constant Attribute_Definition_Access
         := Attribute_Definition_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Default_Value;
   end Get_Default_Value;


   procedure Set_Project (Object : in out Attribute_Definition_Ref;
                          Value  : in Jason.Projects.Models.Project_Ref'Class) is
      Impl : Attribute_Definition_Access;
   begin
      Set_Field (Object, Impl);
      ADO.Objects.Set_Field_Object (Impl.all, 5, Impl.Project, Value);
   end Set_Project;

   function Get_Project (Object : in Attribute_Definition_Ref)
                  return Jason.Projects.Models.Project_Ref'Class is
      Impl : constant Attribute_Definition_Access
         := Attribute_Definition_Impl (Object.Get_Load_Object.all)'Access;
   begin
      return Impl.Project;
   end Get_Project;

   --  Copy of the object.
   procedure Copy (Object : in Attribute_Definition_Ref;
                   Into   : in out Attribute_Definition_Ref) is
      Result : Attribute_Definition_Ref;
   begin
      if not Object.Is_Null then
         declare
            Impl : constant Attribute_Definition_Access
              := Attribute_Definition_Impl (Object.Get_Load_Object.all)'Access;
            Copy : constant Attribute_Definition_Access
              := new Attribute_Definition_Impl;
         begin
            ADO.Objects.Set_Object (Result, Copy.all'Access);
            Copy.Copy (Impl.all);
            Copy.Version := Impl.Version;
            Copy.Name := Impl.Name;
            Copy.Default_Value := Impl.Default_Value;
            Copy.Project := Impl.Project;
         end;
      end if;
      Into := Result;
   end Copy;

   procedure Find (Object  : in out Attribute_Definition_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Impl  : constant Attribute_Definition_Access := new Attribute_Definition_Impl;
   begin
      Impl.Find (Session, Query, Found);
      if Found then
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      else
         ADO.Objects.Set_Object (Object, null);
         Destroy (Impl);
      end if;
   end Find;

   procedure Load (Object  : in out Attribute_Definition_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier) is
      Impl  : constant Attribute_Definition_Access := new Attribute_Definition_Impl;
      Found : Boolean;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
         raise ADO.Objects.NOT_FOUND;
      end if;
      ADO.Objects.Set_Object (Object, Impl.all'Access);
   end Load;

   procedure Load (Object  : in out Attribute_Definition_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean) is
      Impl  : constant Attribute_Definition_Access := new Attribute_Definition_Impl;
      Query : ADO.SQL.Query;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Impl.Find (Session, Query, Found);
      if not Found then
         Destroy (Impl);
      else
         ADO.Objects.Set_Object (Object, Impl.all'Access);
      end if;
   end Load;

   procedure Save (Object  : in out Attribute_Definition_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl = null then
         Impl := new Attribute_Definition_Impl;
         ADO.Objects.Set_Object (Object, Impl);
      end if;
      if not ADO.Objects.Is_Created (Impl.all) then
         Impl.Create (Session);
      else
         Impl.Save (Session);
      end if;
   end Save;

   procedure Delete (Object  : in out Attribute_Definition_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Impl : constant ADO.Objects.Object_Record_Access := Object.Get_Object;
   begin
      if Impl /= null then
         Impl.Delete (Session);
      end if;
   end Delete;

   --  --------------------
   --  Free the object
   --  --------------------
   procedure Destroy (Object : access Attribute_Definition_Impl) is
      type Attribute_Definition_Impl_Ptr is access all Attribute_Definition_Impl;
      procedure Unchecked_Free is new Ada.Unchecked_Deallocation
              (Attribute_Definition_Impl, Attribute_Definition_Impl_Ptr);
      pragma Warnings (Off, "*redundant conversion*");
      Ptr : Attribute_Definition_Impl_Ptr := Attribute_Definition_Impl (Object.all)'Access;
      pragma Warnings (On, "*redundant conversion*");
   begin
      Unchecked_Free (Ptr);
   end Destroy;

   procedure Find (Object  : in out Attribute_Definition_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean) is
      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Query, ATTRIBUTE_DEFINITION_DEF'Access);
   begin
      Stmt.Execute;
      if Stmt.Has_Elements then
         Object.Load (Stmt, Session);
         Stmt.Next;
         Found := not Stmt.Has_Elements;
      else
         Found := False;
      end if;
   end Find;

   overriding
   procedure Load (Object  : in out Attribute_Definition_Impl;
                   Session : in out ADO.Sessions.Session'Class) is
      Found : Boolean;
      Query : ADO.SQL.Query;
      Id    : constant ADO.Identifier := Object.Get_Key_Value;
   begin
      Query.Bind_Param (Position => 1, Value => Id);
      Query.Set_Filter ("id = ?");
      Object.Find (Session, Query, Found);
      if not Found then
         raise ADO.Objects.NOT_FOUND;
      end if;
   end Load;

   procedure Save (Object  : in out Attribute_Definition_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Update_Statement
         := Session.Create_Statement (ATTRIBUTE_DEFINITION_DEF'Access);
   begin
      if Object.Is_Modified (1) then
         Stmt.Save_Field (Name  => COL_0_2_NAME, --  id
                          Value => Object.Get_Key);
         Object.Clear_Modified (1);
      end if;
      if Object.Is_Modified (3) then
         Stmt.Save_Field (Name  => COL_2_2_NAME, --  name
                          Value => Object.Name);
         Object.Clear_Modified (3);
      end if;
      if Object.Is_Modified (4) then
         Stmt.Save_Field (Name  => COL_3_2_NAME, --  default_value
                          Value => Object.Default_Value);
         Object.Clear_Modified (4);
      end if;
      if Object.Is_Modified (5) then
         Stmt.Save_Field (Name  => COL_4_2_NAME, --  project_id
                          Value => Object.Project);
         Object.Clear_Modified (5);
      end if;
      if Stmt.Has_Save_Fields then
         Object.Version := Object.Version + 1;
         Stmt.Save_Field (Name  => "version",
                          Value => Object.Version);
         Stmt.Set_Filter (Filter => "id = ? and version = ?");
         Stmt.Add_Param (Value => Object.Get_Key);
         Stmt.Add_Param (Value => Object.Version - 1);
         declare
            Result : Integer;
         begin
            Stmt.Execute (Result);
            if Result /= 1 then
               if Result /= 0 then
                  raise ADO.Objects.UPDATE_ERROR;
               else
                  raise ADO.Objects.LAZY_LOCK;
               end if;
            end if;
         end;
      end if;
   end Save;

   procedure Create (Object  : in out Attribute_Definition_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Query : ADO.Statements.Insert_Statement
                  := Session.Create_Statement (ATTRIBUTE_DEFINITION_DEF'Access);
      Result : Integer;
   begin
      Object.Version := 1;
      Session.Allocate (Id => Object);
      Query.Save_Field (Name  => COL_0_2_NAME, --  id
                        Value => Object.Get_Key);
      Query.Save_Field (Name  => COL_1_2_NAME, --  version
                        Value => Object.Version);
      Query.Save_Field (Name  => COL_2_2_NAME, --  name
                        Value => Object.Name);
      Query.Save_Field (Name  => COL_3_2_NAME, --  default_value
                        Value => Object.Default_Value);
      Query.Save_Field (Name  => COL_4_2_NAME, --  project_id
                        Value => Object.Project);
      Query.Execute (Result);
      if Result /= 1 then
         raise ADO.Objects.INSERT_ERROR;
      end if;
      ADO.Objects.Set_Created (Object);
   end Create;

   procedure Delete (Object  : in out Attribute_Definition_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class) is
      Stmt : ADO.Statements.Delete_Statement
         := Session.Create_Statement (ATTRIBUTE_DEFINITION_DEF'Access);
   begin
      Stmt.Set_Filter (Filter => "id = ?");
      Stmt.Add_Param (Value => Object.Get_Key);
      Stmt.Execute;
   end Delete;

   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Attribute_Definition_Ref;
                       Name : in String) return Util.Beans.Objects.Object is
      Obj  : ADO.Objects.Object_Record_Access;
      Impl : access Attribute_Definition_Impl;
   begin
      if From.Is_Null then
         return Util.Beans.Objects.Null_Object;
      end if;
      Obj := From.Get_Load_Object;
      Impl := Attribute_Definition_Impl (Obj.all)'Access;
      if Name = "id" then
         return ADO.Objects.To_Object (Impl.Get_Key);
      elsif Name = "name" then
         return Util.Beans.Objects.To_Object (Impl.Name);
      elsif Name = "default_value" then
         return Util.Beans.Objects.To_Object (Impl.Default_Value);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   procedure List (Object  : in out Attribute_Definition_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class) is
      Stmt : ADO.Statements.Query_Statement
        := Session.Create_Statement (Query, ATTRIBUTE_DEFINITION_DEF'Access);
   begin
      Stmt.Execute;
      Attribute_Definition_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         declare
            Item : Attribute_Definition_Ref;
            Impl : constant Attribute_Definition_Access := new Attribute_Definition_Impl;
         begin
            Impl.Load (Stmt, Session);
            ADO.Objects.Set_Object (Item, Impl.all'Access);
            Object.Append (Item);
         end;
         Stmt.Next;
      end loop;
   end List;

   --  ------------------------------
   --  Load the object from current iterator position
   --  ------------------------------
   procedure Load (Object  : in out Attribute_Definition_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class) is
   begin
      Object.Set_Key_Value (Stmt.Get_Identifier (0));
      Object.Name := Stmt.Get_Unbounded_String (2);
      Object.Default_Value := Stmt.Get_Unbounded_String (3);
      if not Stmt.Is_Null (4) then
         Object.Project.Set_Key_Value (Stmt.Get_Identifier (4), Session);
      end if;
      Object.Version := Stmt.Get_Integer (1);
      ADO.Objects.Set_Created (Object);
   end Load;


   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in List_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "id" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Id));
      elsif Name = "title" then
         return Util.Beans.Objects.To_Object (From.Title);
      elsif Name = "status" then
         return Jason.Projects.Models.Status_Type_Objects.To_Object (From.Status);
      elsif Name = "create_date" then
         return Util.Beans.Objects.Time.To_Object (From.Create_Date);
      elsif Name = "ticket_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Ticket_Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out List_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "id" then
         Item.Id := ADO.Identifier (Util.Beans.Objects.To_Long_Long_Integer (Value));
      elsif Name = "title" then
         Item.Title := Util.Beans.Objects.To_Unbounded_String (Value);
      elsif Name = "status" then
         Item.Status := Jason.Projects.Models.Status_Type_Objects.To_Value (Value);
      elsif Name = "create_date" then
         Item.Create_Date := Util.Beans.Objects.Time.To_Time (Value);
      elsif Name = "ticket_count" then
         Item.Ticket_Count := Util.Beans.Objects.To_Integer (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out List_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  The list of projects.
   --  --------------------
   procedure List (Object  : in out List_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out List_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Natural := 0;
      procedure Read (Into : in out List_Info) is
      begin
         Into.Id := Stmt.Get_Identifier (0);
         Into.Title := Stmt.Get_Unbounded_String (1);
         Into.Status := Jason.Projects.Models.Status_Type'Val (Stmt.Get_Integer (2));
         Into.Create_Date := Stmt.Get_Time (3);
         Into.Ticket_Count := Stmt.Get_Natural (4);
      end Read;
   begin
      Stmt.Execute;
      List_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;


   procedure Op_Load (Bean    : in out Project_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Project_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Project_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Project_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Project_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");
   procedure Op_Create (Bean    : in out Project_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Create (Bean    : in out Project_Bean;
                        Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Project_Bean'Class (Bean).Create (Outcome);
   end Op_Create;
   package Binding_Project_Bean_2 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Project_Bean,
                                                      Method => Op_Create,
                                                      Name   => "create");
   procedure Op_Save (Bean    : in out Project_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Save (Bean    : in out Project_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Project_Bean'Class (Bean).Save (Outcome);
   end Op_Save;
   package Binding_Project_Bean_3 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Project_Bean,
                                                      Method => Op_Save,
                                                      Name   => "save");
   procedure Op_Create_Wiki (Bean    : in out Project_Bean;
                             Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Create_Wiki (Bean    : in out Project_Bean;
                             Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Project_Bean'Class (Bean).Create_Wiki (Outcome);
   end Op_Create_Wiki;
   package Binding_Project_Bean_4 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Project_Bean,
                                                      Method => Op_Create_Wiki,
                                                      Name   => "create_wiki");
   procedure Op_Load_Wiki (Bean    : in out Project_Bean;
                           Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load_Wiki (Bean    : in out Project_Bean;
                           Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Project_Bean'Class (Bean).Load_Wiki (Outcome);
   end Op_Load_Wiki;
   package Binding_Project_Bean_5 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Project_Bean,
                                                      Method => Op_Load_Wiki,
                                                      Name   => "load_wiki");

   Binding_Project_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Project_Bean_1.Proxy'Access,
         2 => Binding_Project_Bean_2.Proxy'Access,
         3 => Binding_Project_Bean_3.Proxy'Access,
         4 => Binding_Project_Bean_4.Proxy'Access,
         5 => Binding_Project_Bean_5.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Project_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Project_Bean_Array'Access;
   end Get_Method_Bindings;

   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Project_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "name" then
         Item.Set_Name (Util.Beans.Objects.To_String (Value));
      elsif Name = "create_date" then
         Item.Set_Create_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "status" then
         Item.Set_Status (Status_Type_Objects.To_Value (Value));
      elsif Name = "last_ticket" then
         Item.Set_Last_Ticket (Util.Beans.Objects.To_Integer (Value));
      elsif Name = "update_date" then
         Item.Set_Update_Date (Util.Beans.Objects.Time.To_Time (Value));
      elsif Name = "description" then
         Item.Set_Description (Util.Beans.Objects.To_String (Value));
      end if;
   end Set_Value;

   procedure Op_Load (Bean    : in out Project_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String);
   procedure Op_Load (Bean    : in out Project_List_Bean;
                      Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is
   begin
      Project_List_Bean'Class (Bean).Load (Outcome);
   end Op_Load;
   package Binding_Project_List_Bean_1 is
     new ASF.Events.Faces.Actions.Action_Method.Bind (Bean   => Project_List_Bean,
                                                      Method => Op_Load,
                                                      Name   => "load");

   Binding_Project_List_Bean_Array : aliased constant Util.Beans.Methods.Method_Binding_Array
     := (1 => Binding_Project_List_Bean_1.Proxy'Access
     );

   --  ------------------------------
   --  This bean provides some methods that can be used in a Method_Expression.
   --  ------------------------------
   overriding
   function Get_Method_Bindings (From : in Project_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access is
      pragma Unreferenced (From);
   begin
      return Binding_Project_List_Bean_Array'Access;
   end Get_Method_Bindings;
   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in Project_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "page" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page));
      elsif Name = "page_size" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Page_Size));
      elsif Name = "count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Count));
      elsif Name = "tag" then
         return Util.Beans.Objects.To_Object (From.Tag);
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out Project_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "page" then
         Item.Page := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "page_size" then
         Item.Page_Size := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "count" then
         Item.Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "tag" then
         Item.Tag := Util.Beans.Objects.To_Unbounded_String (Value);
      end if;
   end Set_Value;


end Jason.Projects.Models;
