-----------------------------------------------------------------------
--  Jason.Tickets.Models -- Jason.Tickets.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2016 Stephane.Carrez
--  Written by Stephane.Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off);
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with ADO.Queries;
with ADO.Queries.Loaders;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Objects.Enums;
with Util.Beans.Basic.Lists;
with AWA.Users.Models;
with Jason.Projects.Models;
with Util.Beans.Methods;
pragma Warnings (On);
package Jason.Tickets.Models is

   pragma Style_Checks ("-mr");

   type Actor_Type is (ACTOR_USER, ACTOR_SYSTEM);
   for Actor_Type use (ACTOR_USER => 0, ACTOR_SYSTEM => 1);
   package Actor_Type_Objects is
      new Util.Beans.Objects.Enums (Actor_Type);

   type Status_Type is (OPEN, ASSIGNED, ACCEPTED, ON_HOLD, REOPEN, REJECTED, CLOSED);
   for Status_Type use (OPEN => 0, ASSIGNED => 1, ACCEPTED => 2, ON_HOLD => 3, REOPEN => 4, REJECTED => 5, CLOSED => 6);
   package Status_Type_Objects is
      new Util.Beans.Objects.Enums (Status_Type);

   type Ticket_Type is (INCIDENT, ISSUE, WORK, ENHANCEMENT, LIMITATION, CHANGE_REQUEST);
   for Ticket_Type use (INCIDENT => 0, ISSUE => 1, WORK => 2, ENHANCEMENT => 3, LIMITATION => 4, CHANGE_REQUEST => 5);
   package Ticket_Type_Objects is
      new Util.Beans.Objects.Enums (Ticket_Type);

   type Ticket_Ref is new ADO.Objects.Object_Ref with null record;

   type Attribute_Ref is new ADO.Objects.Object_Ref with null record;

   --  Create an object key for Ticket.
   function Ticket_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Ticket from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Ticket_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Ticket : constant Ticket_Ref;
   function "=" (Left, Right : Ticket_Ref'Class) return Boolean;

   --  Set the ticket identifier.
   procedure Set_Id (Object : in out Ticket_Ref;
                     Value  : in ADO.Identifier);

   --  Get the ticket identifier.
   function Get_Id (Object : in Ticket_Ref)
                 return ADO.Identifier;
   --  Get the optimistic lock version.
   function Get_Version (Object : in Ticket_Ref)
                 return Integer;

   --  Set the ticket summary.
   procedure Set_Summary (Object : in out Ticket_Ref;
                          Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Summary (Object : in out Ticket_Ref;
                          Value : in String);

   --  Get the ticket summary.
   function Get_Summary (Object : in Ticket_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Summary (Object : in Ticket_Ref)
                 return String;

   --  Set the ticket project unique identifier.
   procedure Set_Ident (Object : in out Ticket_Ref;
                        Value  : in Integer);

   --  Get the ticket project unique identifier.
   function Get_Ident (Object : in Ticket_Ref)
                 return Integer;

   --  Set the ticket creation date.
   procedure Set_Create_Date (Object : in out Ticket_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the ticket creation date.
   function Get_Create_Date (Object : in Ticket_Ref)
                 return Ada.Calendar.Time;

   --  Set the ticket priority.
   procedure Set_Priority (Object : in out Ticket_Ref;
                           Value  : in Integer);

   --  Get the ticket priority.
   function Get_Priority (Object : in Ticket_Ref)
                 return Integer;

   --  Set the ticket status.
   procedure Set_Status (Object : in out Ticket_Ref;
                         Value  : in Jason.Tickets.Models.Status_Type);

   --  Get the ticket status.
   function Get_Status (Object : in Ticket_Ref)
                 return Jason.Tickets.Models.Status_Type;

   --  Set the ticket description.
   procedure Set_Description (Object : in out Ticket_Ref;
                              Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Description (Object : in out Ticket_Ref;
                              Value : in String);

   --  Get the ticket description.
   function Get_Description (Object : in Ticket_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Description (Object : in Ticket_Ref)
                 return String;

   --  Set the last ticket update date.
   procedure Set_Update_Date (Object : in out Ticket_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the last ticket update date.
   function Get_Update_Date (Object : in Ticket_Ref)
                 return Ada.Calendar.Time;

   --  Set the ticket type.
   procedure Set_Ticket_Type (Object : in out Ticket_Ref;
                              Value  : in Jason.Tickets.Models.Ticket_Type);

   --  Get the ticket type.
   function Get_Ticket_Type (Object : in Ticket_Ref)
                 return Jason.Tickets.Models.Ticket_Type;

   --
   procedure Set_Project (Object : in out Ticket_Ref;
                          Value  : in Jason.Projects.Models.Project_Ref'Class);

   --
   function Get_Project (Object : in Ticket_Ref)
                 return Jason.Projects.Models.Project_Ref'Class;

   --
   procedure Set_Creator (Object : in out Ticket_Ref;
                          Value  : in AWA.Users.Models.User_Ref'Class);

   --
   function Get_Creator (Object : in Ticket_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Ticket_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Ticket_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Ticket_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Ticket_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Ticket_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Ticket_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   TICKET_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Ticket_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Ticket_Ref;
                   Into   : in out Ticket_Ref);

   package Ticket_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Ticket_Ref,
                                  "="          => "=");
   subtype Ticket_Vector is Ticket_Vectors.Vector;

   procedure List (Object  : in out Ticket_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);
   --  Create an object key for Attribute.
   function Attribute_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Attribute from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Attribute_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Attribute : constant Attribute_Ref;
   function "=" (Left, Right : Attribute_Ref'Class) return Boolean;

   --
   procedure Set_Id (Object : in out Attribute_Ref;
                     Value  : in ADO.Identifier);

   --
   function Get_Id (Object : in Attribute_Ref)
                 return ADO.Identifier;

   --
   procedure Set_Value (Object : in out Attribute_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Value (Object : in out Attribute_Ref;
                        Value : in String);

   --
   function Get_Value (Object : in Attribute_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Value (Object : in Attribute_Ref)
                 return String;
   --
   function Get_Version (Object : in Attribute_Ref)
                 return Integer;

   --
   procedure Set_Ticket (Object : in out Attribute_Ref;
                         Value  : in Jason.Tickets.Models.Ticket_Ref'Class);

   --
   function Get_Ticket (Object : in Attribute_Ref)
                 return Jason.Tickets.Models.Ticket_Ref'Class;

   --  Set the attribute definition.
   procedure Set_Definition (Object : in out Attribute_Ref;
                             Value  : in Jason.Projects.Models.Attribute_Definition_Ref'Class);

   --  Get the attribute definition.
   function Get_Definition (Object : in Attribute_Ref)
                 return Jason.Projects.Models.Attribute_Definition_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Attribute_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Attribute_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Attribute_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Attribute_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Attribute_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Attribute_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   ATTRIBUTE_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Attribute_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Attribute_Ref;
                   Into   : in out Attribute_Ref);

   package Attribute_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Attribute_Ref,
                                  "="          => "=");
   subtype Attribute_Vector is Attribute_Vectors.Vector;

   procedure List (Object  : in out Attribute_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);

   --  --------------------
   --    The list of tickets.
   --  --------------------
   type List_Info is
     new Util.Beans.Basic.Bean with  record

      --  the ticket identifier.
      Id : ADO.Identifier;

      --  the ticket ident number.
      Ident : Integer;

      --  the ticket summary.
      Summary : Ada.Strings.Unbounded.Unbounded_String;

      --  the ticket priority.
      Priority : Integer;

      --  the ticket creation date.
      Create_Date : Ada.Calendar.Time;

      --  the ticket modification date.
      Update_Date : Ada.Calendar.Time;

      --  the ticket status.
      Status : Jason.Tickets.Models.Status_Type;

      --  the ticket creator's name.
      Creator : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in List_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out List_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);


   package List_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => List_Info);
   package List_Info_Vectors renames List_Info_Beans.Vectors;
   subtype List_Info_List_Bean is List_Info_Beans.List_Bean;

   type List_Info_List_Bean_Access is access all List_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out List_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype List_Info_Vector is List_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out List_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_List : constant ADO.Queries.Query_Definition_Access;

   Query_List_Tag_Filter : constant ADO.Queries.Query_Definition_Access;

   --  --------------------
   --    The ticket information.
   --  --------------------
   type Ticket_Info is abstract
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record

      --  the ticket identifier.
      Id : ADO.Identifier;

      --  the ticket ident number.
      Ident : Integer;

      --  the ticket summary.
      Summary : Ada.Strings.Unbounded.Unbounded_String;

      --  the ticket description.
      Description : Ada.Strings.Unbounded.Unbounded_String;

      --  the ticket priority.
      Priority : Integer;

      --  the ticket creation date.
      Create_Date : Ada.Calendar.Time;

      --  the ticket modification date.
      Update_Date : Ada.Calendar.Time;

      --  the ticket status.
      Status : Jason.Tickets.Models.Status_Type;

      --  the project identifier.
      Project_Id : ADO.Identifier;

      --  the project name.
      Project_Name : Ada.Strings.Unbounded.Unbounded_String;

      --  the ticket creator's name.
      Creator : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Ticket_Info)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Ticket_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Ticket_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Ticket_Info;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   --  Read in the object the data from the query result and prepare to read the next row.
   --  If there is no row, raise the ADO.NOT_FOUND exception.
   procedure Read (Into : in out Ticket_Info;
                   Stmt : in out ADO.Statements.Query_Statement'Class);

   --  Run the query controlled by <b>Context</b> and load the result in <b>Object</b>.
   procedure Load (Object  : in out Ticket_Info'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_Info : constant ADO.Queries.Query_Definition_Access;


   type Ticket_Bean is abstract new Jason.Tickets.Models.Ticket_Ref
     and Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with null record;


   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Ticket_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;


   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Ticket_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Ticket_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Create (Bean : in out Ticket_Bean;
                    Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Save (Bean : in out Ticket_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   type Ticket_List_Bean is abstract limited
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record
      Project_Id : ADO.Identifier;

      --  the page number.
      Page : Integer;

      --  the number of tickets found.
      Count : Integer;

      --  the tag filter.
      Tag : Ada.Strings.Unbounded.Unbounded_String;

      --  the number of tickets per page.
      Page_Size : Integer;

      --  the list sort order.
      Sort : Ada.Strings.Unbounded.Unbounded_String;

      --  the ticket status filter.
      Status : Status_Type;

      --  the ticket priority filter.
      Priority : Integer;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Ticket_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Ticket_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Ticket_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Ticket_List_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   type Ticket_Info_Bean is abstract limited
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record
      Ticket_Id : ADO.Identifier;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Ticket_Info_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Ticket_Info_Bean;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Ticket_Info_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Ticket_Info_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;


private
   TICKET_NAME : aliased constant String := "jason_ticket";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "summary";
   COL_3_1_NAME : aliased constant String := "ident";
   COL_4_1_NAME : aliased constant String := "create_date";
   COL_5_1_NAME : aliased constant String := "priority";
   COL_6_1_NAME : aliased constant String := "status";
   COL_7_1_NAME : aliased constant String := "description";
   COL_8_1_NAME : aliased constant String := "update_date";
   COL_9_1_NAME : aliased constant String := "ticket_type";
   COL_10_1_NAME : aliased constant String := "project_id";
   COL_11_1_NAME : aliased constant String := "creator_id";

   TICKET_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 12,
      Table => TICKET_NAME'Access,
      Members => (
         1 => COL_0_1_NAME'Access,
         2 => COL_1_1_NAME'Access,
         3 => COL_2_1_NAME'Access,
         4 => COL_3_1_NAME'Access,
         5 => COL_4_1_NAME'Access,
         6 => COL_5_1_NAME'Access,
         7 => COL_6_1_NAME'Access,
         8 => COL_7_1_NAME'Access,
         9 => COL_8_1_NAME'Access,
         10 => COL_9_1_NAME'Access,
         11 => COL_10_1_NAME'Access,
         12 => COL_11_1_NAME'Access
)
     );
   TICKET_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := TICKET_DEF'Access;

   Null_Ticket : constant Ticket_Ref
      := Ticket_Ref'(ADO.Objects.Object_Ref with null record);

   type Ticket_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => TICKET_DEF'Access)
   with record
       Version : Integer;
       Summary : Ada.Strings.Unbounded.Unbounded_String;
       Ident : Integer;
       Create_Date : Ada.Calendar.Time;
       Priority : Integer;
       Status : Jason.Tickets.Models.Status_Type;
       Description : Ada.Strings.Unbounded.Unbounded_String;
       Update_Date : Ada.Calendar.Time;
       Ticket_Type : Jason.Tickets.Models.Ticket_Type;
       Project : Jason.Projects.Models.Project_Ref;
       Creator : AWA.Users.Models.User_Ref;
   end record;

   type Ticket_Access is access all Ticket_Impl;

   overriding
   procedure Destroy (Object : access Ticket_Impl);

   overriding
   procedure Find (Object  : in out Ticket_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Ticket_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Ticket_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Ticket_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Ticket_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Ticket_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Ticket_Ref'Class;
                        Impl   : out Ticket_Access);
   ATTRIBUTE_NAME : aliased constant String := "jason_attribute";
   COL_0_2_NAME : aliased constant String := "id";
   COL_1_2_NAME : aliased constant String := "value";
   COL_2_2_NAME : aliased constant String := "version";
   COL_3_2_NAME : aliased constant String := "ticket_id";
   COL_4_2_NAME : aliased constant String := "definition_id";

   ATTRIBUTE_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 5,
      Table => ATTRIBUTE_NAME'Access,
      Members => (
         1 => COL_0_2_NAME'Access,
         2 => COL_1_2_NAME'Access,
         3 => COL_2_2_NAME'Access,
         4 => COL_3_2_NAME'Access,
         5 => COL_4_2_NAME'Access
)
     );
   ATTRIBUTE_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := ATTRIBUTE_DEF'Access;

   Null_Attribute : constant Attribute_Ref
      := Attribute_Ref'(ADO.Objects.Object_Ref with null record);

   type Attribute_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => ATTRIBUTE_DEF'Access)
   with record
       Value : Ada.Strings.Unbounded.Unbounded_String;
       Version : Integer;
       Ticket : Jason.Tickets.Models.Ticket_Ref;
       Definition : Jason.Projects.Models.Attribute_Definition_Ref;
   end record;

   type Attribute_Access is access all Attribute_Impl;

   overriding
   procedure Destroy (Object : access Attribute_Impl);

   overriding
   procedure Find (Object  : in out Attribute_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Attribute_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Attribute_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Attribute_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Attribute_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Attribute_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Attribute_Ref'Class;
                        Impl   : out Attribute_Access);

   package File_1 is
      new ADO.Queries.Loaders.File (Path => "tickets-list.xml",
                                    Sha1 => "7454796A928A422E3F15CB2BDFCC8928F0B2E623");

   package Def_Listinfo_List is
      new ADO.Queries.Loaders.Query (Name => "list",
                                     File => File_1.File'Access);
   Query_List : constant ADO.Queries.Query_Definition_Access
   := Def_Listinfo_List.Query'Access;

   package Def_Listinfo_List_Tag_Filter is
      new ADO.Queries.Loaders.Query (Name => "list-tag-filter",
                                     File => File_1.File'Access);
   Query_List_Tag_Filter : constant ADO.Queries.Query_Definition_Access
   := Def_Listinfo_List_Tag_Filter.Query'Access;

   package File_2 is
      new ADO.Queries.Loaders.File (Path => "ticket-info.xml",
                                    Sha1 => "D5C042D77C9A68858F200A871CDDD130F6E8262D");

   package Def_Ticketinfo_Info is
      new ADO.Queries.Loaders.Query (Name => "info",
                                     File => File_2.File'Access);
   Query_Info : constant ADO.Queries.Query_Definition_Access
   := Def_Ticketinfo_Info.Query'Access;
end Jason.Tickets.Models;
